#!/usr/bin/env bash

# Write a Bash script that sets up your web servers for the deployment of web_static. It must:

# Install Nginx if it not already installed
# Create the folder /data/ if it doesn’t already exist
# Create the folder /data/web_static/ if it doesn’t already exist
# Create the folder /data/web_static/releases/ if it doesn’t already exist
# Create the folder /data/web_static/shared/ if it doesn’t already exist
# Create the folder /data/web_static/releases/test/ if it doesn’t already exist
# Create a fake HTML file /data/web_static/releases/test/index.html (with simple content, to test your Nginx configuration)
# Create a symbolic link /data/web_static/current linked to the /data/web_static/releases/test/ folder. If the symbolic link already exists, it should be deleted and recreated every time the script is ran.
# Give ownership of the /data/ folder to the ubuntu user AND group (you can assume this user and group exist). This should be recursive; everything inside should be created/owned by this user/group.
# Update the Nginx configuration to serve the content of /data/web_static/current/ to hbnb_static (ex: https://mydomainname.tech/hbnb_static). Don’t forget to restart Nginx after updating the configuration:
# Use alias inside your Nginx configuration
# Tip
# Your program should always exit successfully. Don’t forget to run your script on both of your web servers.

# In optional, you will redo this task but by using Puppeti

# Install Nginx if it not already installed
sudo apt-get update
sudo apt-get install nginx -y
sudo mkdir -p /var/www/html
sudo chmod -R 755 /var/www


# Create the folder /data/ if it doesn’t already exist
folder_path="/data/"
if [ ! -d "$folder_path" ]; then
    # Create the folder
    mkdir "$folder_path"

# Create the folder /data/web_static/ if it doesn’t already exist
folder_path="/data/web_static/"
if [ ! -d "$folder_path" ]; then
    # Create the folder
    mkdir "$folder_path"

# Create the folder /data/web_static/releases/ if it doesn’t already exist
folder_path="/data/web_static/releases/"
if [ ! -d "$folder_path" ]; then
    # Create the folder
    mkdir "$folder_path"

# Create the folder /data/web_static/shared/ if it doesn’t already exist
folder_path="/data/web_static/releases/"
if [ ! -d "$folder_path" ]; then
    # Create the folder
    mkdir "$folder_path"

# Create the folder /data/web_static/releases/test/ if it doesn’t already exist
folder_path="/data/web_static/releases/test/"
if [ ! -d "$folder_path" ]; then
    # Create the folder
    mkdir "$folder_path"

# Create a fake HTML file /data/web_static/releases/test/index.html (with simple content, to test your Nginx configuration)
file_path="/data/web_static/releases/index.html"
if [ ! -f "$file_path" ]; then
    # Create the folder
    echo > "$file_path"

# Create a symbolic link /data/web_static/current linked to the /data/web_static/releases/test/ folder. If the symbolic link already exists, it should be deleted and recreated every time the script is ran.
# Give ownership of the /data/ folder to the ubuntu user AND group (you can assume this user and group exist). This should be recursive; everything inside should be created/owned by this user/group.
# Update the Nginx configuration to serve the content of /data/web_static/current/ to hbnb_static (ex: https://mydomainname.tech/hbnb_static). Don’t forget to restart Nginx after updating the configuration:
# Use alias inside your Nginx configuration
# Tip
# Your program should always exit successfully. Don’t forget to run your script on both of your web servers.

# In optional, you will redo this task but by using Puppet
